using UnityEngine;using System.Collections;public class FurnitureHandler : MonoBehaviour {		private Furniture furniture;	private EditorGameManager egm;	private float furnitureHeight;		void Start () {		egm = EditorGameManager.Instance;		furnitureHeight = gameObject.transform.GetComponent<Renderer>().bounds.extents.y * 2.0f;		AdjustHeight();	}		//must be the first call to this script	public void SetFurniture (Furniture _furniture_) {		furniture = _furniture_;		this.gameObject.GetComponent<Rigidbody> ().mass = furniture.Mass;	}		public void GrabFurniture(Transform newParent) {		this.transform.SetParent (newParent);				egm.IsGrabbingObject = true;		egm.GrabbedObject = this.gameObject;				this.gameObject.transform.GetComponent<Rigidbody>().useGravity=false;		this.gameObject.transform.GetComponent<Rigidbody>().constraints = RigidbodyConstraints.FreezeRotation;	}		public void DropFurniture () {		//		check furniture type to check where furniture can be dropped or attached to		//		if(furniture.Type)....				this.transform.SetParent (null);				this.gameObject.GetComponent<Rigidbody>().useGravity=true;		this.gameObject.GetComponent<Rigidbody>().constraints = RigidbodyConstraints.None;				egm.IsGrabbingObject = false;		egm.GrabbedObject = null;		AdjustHeight();	}		//	void onCollisionEnter(Collision collision) {	//		collision.gameObject.transform.parent = null; //drop object on collision	//	}		void Update() {		if (egm.GrabbedObject == this.gameObject) {			this.gameObject.transform.GetComponent<Rigidbody> ().velocity = Vector3.zero;			this.gameObject.transform.GetComponent<Rigidbody> ().angularVelocity = Vector3.zero;		}	}	private void AdjustHeight() {		RaycastHit hit;		if(Physics.Raycast(transform.position, -Vector3.up, out hit, 10)) {			Vector3 newPosition;			if(!hit.transform.name.Equals("Floor")) {				float objectHalfHeight = hit.transform.GetComponent<Renderer>().bounds.extents.y;				Debug.Log("Bottom Obj Half Height = " + objectHalfHeight + "\n Object height = " + furnitureHeight/2);				newPosition = new Vector3(this.gameObject.transform.position.x, furnitureHeight + objectHalfHeight, this.gameObject.transform.position.z);			} else {				newPosition = new Vector3(this.gameObject.transform.position.x, furnitureHeight, this.gameObject.transform.position.z);			}			this.gameObject.transform.position = newPosition;		}	}}