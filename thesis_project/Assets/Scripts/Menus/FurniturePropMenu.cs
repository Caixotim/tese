using UnityEngine;using System.Collections;public class FurniturePropMenu : MonoBehaviour {	private EditorGameManager egm;	private MenuManager mm;	private enum MenuProperty {move, delete, cancel};	private MenuProperty[] properties = {MenuProperty.move, MenuProperty.delete, MenuProperty.cancel};	private int selectedPropertyIndex;	private bool isFirstUpdate;	public Shader outlineShader;	// Use this for initialization	void Start () {		egm = EditorGameManager.Instance;		mm = MenuManager.Instance;		isFirstUpdate = true;		selectedPropertyIndex = 0;	}		// Update is called once per frame	void Update () {		if(mm.ActivatedMenu == MenuManager.Menu.furniture_properties) {			if(isFirstUpdate) {				SetFurniturePropMenu(true);				isFirstUpdate = false;			}			WiiHandler();		} else {			isFirstUpdate = true;		}	}	private void SetFurniturePropMenu(bool toShow) {		Canvas cv = GameObject.Find("Menu_Properties/Item_block").GetComponent<Canvas>();		cv.enabled = toShow;		if(toShow) {			mm.ActivatedMenu = MenuManager.Menu.furniture_properties;		} else {			mm.ActivatedMenu = MenuManager.Menu.none;		}	}	private void WiiHandler () {		NunchuckMenuHandle();		WiimoteMenuHandle();	}	private void WiimoteMenuHandle() {		if(egm.CurrentWiimote.GetKeyPress((int)Wiimote.KeyCode.BUTTON_A) && mm.ActivatedMenu == MenuManager.Menu.furniture_properties) {			Debug.Log("Do: " + properties[selectedPropertyIndex]);			switch(properties[selectedPropertyIndex]) {				case MenuProperty.move:					SetFurniturePropMenu(false);					break;				case MenuProperty.delete:					egm.GrabbedObject.GetComponent<FurnitureHandler>().DeleteFurniture();					SetFurniturePropMenu(false);					break;				case MenuProperty.cancel:					egm.GrabbedObject.GetComponent<FurnitureHandler>().DropFurniture();					SetFurniturePropMenu(false);					break;			}		}		if(egm.CurrentWiimote.GetKeyPress((int)Wiimote.KeyCode.NUNCHUCK_C) && mm.ActivatedMenu == MenuManager.Menu.furniture_properties) {			egm.GrabbedObject.GetComponent<FurnitureHandler>().DropFurniture();			SetFurniturePropMenu(false);		}	}	private void NunchuckMenuHandle() {		if(egm.CurrentWiimote.GetKeyPress((int)Wiimote.KeyCode.NUNCHUCK_ANALOG_DOWN)) {			if(selectedPropertyIndex < properties.Length - 1) {				selectedPropertyIndex ++;				HighlightMenuItem();			}		}		else if(egm.CurrentWiimote.GetKeyPress((int)Wiimote.KeyCode.NUNCHUCK_ANALOG_UP)) {			if(selectedPropertyIndex > 0) {				selectedPropertyIndex --;				HighlightMenuItem();			}		}	}	private void HighlightMenuItem () {		switch(properties[selectedPropertyIndex]) {			case MenuProperty.move:				//highlight move item				Debug.Log("MOVE");				break;			case MenuProperty.delete:				//highlight delete item				Debug.Log("DELETE");				break;			case MenuProperty.cancel:				//highlight cancel item				Debug.Log("CANCEL");				break;		}	}}