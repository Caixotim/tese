using UnityEngine;using System.Collections;public class ControlsHandler : MonoBehaviour{		private WiimoteReceiver receiver;	//Player settings	private float PlayerMovementSpeed = 2;	private float PlayerRotationSpeed = 100;	public Transform portalGun;	private string objectFrontName;	private Transform PlayerBody;	private Transform PlayerHead;	private EditorGameManager egm;	private SimulationManager sm;			void Start ()	{		egm = EditorGameManager.Instance;		sm = SimulationManager.Instance;				receiver = new WiimoteReceiver ();		receiver.connect ();		portalGun.forward = Vector3.Normalize (Vector3.forward);				PlayerBody = GameObject.Find ("Player").transform;		PlayerHead = GameObject.Find("Player/OVRPlayerController/OVRCameraRig/TrackingSpace/CenterEyeAnchor").transform;				if (sm.SelectedController == SimulationManager.Controller.wiiremote) {			//to ensure that wiiremote is instanciated properly			while (true) {				if (SetWiiMote ()) {					return;				}			}		}	}		// Update is called once per frame	void Update ()	{		if (sm.SelectedController == SimulationManager.Controller.wiiremote) {			if (egm.CurrentWiimote != null) {				WiiControls ();				NunchuckControls ();			}		} /*else if (sm.SelectedController == SimulationManager.Controller.keyboardMouse) {			MouseControls ();			KeyboardControls ();		}*/	}		private void WiiControls ()	{		float delta_x = egm.CurrentWiimote.PRY_YAW;		float delta_y = egm.CurrentWiimote.PRY_PITCH;		float? delta_x_prev = null;		float? delta_y_prev = null;				if (Mathf.Abs (delta_x - 0.5f) < 0.3f || (delta_x_prev != null && delta_x_prev == delta_x))			delta_x = 0;		else			delta_x -= 0.5f;		if (Mathf.Abs (delta_y - 0.515f) < 0.3f || (delta_y_prev != null && delta_y_prev == delta_y))			delta_y = 0;		else			delta_y -= 0.5f;				//Controll gun orientation by IR sensor		Vector3 crosshairPos = Camera.allCameras [0].ScreenToWorldPoint (new Vector3 (egm.CurrentWiimote.IR_X * Screen.width, egm.CurrentWiimote.IR_Y * Screen.height, 5.0f));		portalGun.LookAt (crosshairPos);				if(egm.CurrentWiimote.GetKeyPress((int)Wiimote.KeyCode.BUTTON_A)) {			bool isActionFinished = false;			//apply raycast			RaycastHit hit;			Ray ray = new Ray ();			ray.origin = portalGun.position;			ray.direction = portalGun.forward;			if (Physics.Raycast (ray, out hit, 50.0f)) {				 if(egm.GrabbedObject == null && hit.transform.tag.Equals ("furniture")) {					FurnitureHandler grabDropObject = hit.transform.GetComponent<FurnitureHandler> ();					grabDropObject.GrabFurniture (portalGun.transform);					isActionFinished = true;				} else if(hit.transform.tag.Equals("interactable")) {					//toogle object interaction					SelectInteraction si = GameObject.Find("InteractionsHandler").GetComponent<SelectInteraction>();					si.ToggleAction(hit.transform.name);					isActionFinished = true;				} /*else if(hit.transform.name.Equals("height_pointer")) {					if(crosshairPos.y < 2.5f && crosshairPos.y > 0.5f) {						hit.transform.position = new Vector3(hit.transform.position.x, crosshairPos.y, hit.transform.position.z);						sm.UserHeight = (int) crosshairPos.y * 100;						Debug.Log("Changed height to: " + sm.UserHeight);					}				}*/			}			if (!isActionFinished && egm.GrabbedObject != null) {				FurnitureHandler grabDropObject = egm.GrabbedObject.GetComponent<FurnitureHandler> ();				grabDropObject.DropFurniture ();				isActionFinished = true;			}			//Height			if(egm.CurrentWiimote.BUTTON_A == 1.0f) {				RaycastHit r_hit;				Ray t_ray = new Ray ();				t_ray.origin = portalGun.position;				t_ray.direction = portalGun.forward;				if (Physics.Raycast (t_ray, out r_hit, 50.0f)) {					if(r_hit.transform.name.Equals("height_pointer")) {						if(crosshairPos.y < 2.5f && crosshairPos.y > 0.5f) {							// Debug.Log("pos y = " + crosshairPos.y);							r_hit.transform.position = new Vector3(r_hit.transform.position.x, crosshairPos.y, r_hit.transform.position.z);							sm.UserHeight = (int) (crosshairPos.y * 100.0f);							// Debug.Log("Changed height to: " + sm.UserHeight);						}					}				}			}			//		}	}		private void NunchuckControls ()	{		Nunchuck_analogs ();	}		//Process nunchuck analog controls	private void Nunchuck_analogs ()	{		//read data from nunchuck analog		float value_y = egm.CurrentWiimote.NUNCHUK_JOY_Y_SPLIT;		float value_x = egm.CurrentWiimote.NUNCHUK_JOY_X_SPLIT;		//analog threshold of 0.5 on y-axis		if (Mathf.Abs (value_y) < 0.5f)			value_y = 0;		//analog threshold of 0.5 on x-axis		if (Mathf.Abs (value_x) < 0.5f)			value_x = 0;				//rotate player		PlayerBody.Rotate (0, value_x * Time.deltaTime * PlayerRotationSpeed, 0);				//movevement		PlayerBody.Translate (0, 0, value_y * Time.deltaTime * PlayerMovementSpeed);	}		//Set Wiimote on EditorGameManager	public bool SetWiiMote ()	{		if (receiver.wiimotes.ContainsKey (1)) {			egm.CurrentWiimote = receiver.wiimotes [1];			return true;		}		return false;	}}